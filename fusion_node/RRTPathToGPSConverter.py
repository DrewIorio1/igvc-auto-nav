""" 
    File: RRTPathToGPSConverter.py - A module to convert RRT paths from local coordinates to GPS coordinates.
    This module provides functionality to convert paths generated by Rapidly-exploring Random Trees (RRT)
    from local (x, y) coordinates to GPS (latitude, longitude) coordinates based on a reference origin.

    Required Libraries: 
        math - For mathematical operations, particularly for converting meters to degrees.

    Classes:
        RRTPathToGPSConverter - A class that converts RRT paths from local coordinates to GPS coordinates.
        Functions:
            - __init__: Initializes the converter with a reference GPS coordinate.
            - _lat_offset_in_degrees: Converts northward displacement in meters to degrees latitude.
            - _lon_offset_in_degrees: Converts eastward displacement in meters to degrees longitude.
            - convert_path: Converts an RRT path from local coordinates to GPS coordinates.
"""

import math

class RRTPathToGPSConverter:
    def __init__(self, origin_lat, origin_lon):
        """
        Initialize the converter with a reference GPS coordinate.
        
        Args:
            origin_lat (float): Latitude of the origin (in degrees).
            origin_lon (float): Longitude of the origin (in degrees).
        """
        self.origin_lat = origin_lat
        self.origin_lon = origin_lon

    def _lat_offset_in_degrees(self, dy):
        """
        Convert a displacement in meters northward (dy) to degrees latitude.
        
        Args:
            dy (float): Northward displacement in meters.
        
        Returns:
            float: The offset in degrees latitude.
        """
        # 1 degree latitude is approximately 111320 meters.
        return dy / 111320.0

    def _lon_offset_in_degrees(self, dx, lat):
        """
        Convert a displacement in meters eastward (dx) to degrees longitude.
        
        Args:
            dx (float): Eastward displacement in meters.
            lat (float): The latitude where the conversion is computed (in degrees).
        
        Returns:
            float: The offset in degrees longitude.
        """
        # The conversion factor for longitude depends on latitude.
        return dx / (111320.0 * math.cos(math.radians(lat)))

    def convert_path(self, path):
        """
        Convert an RRT path from local (x, y) coordinates to GPS (lat, lon) coordinates.
        
        The function assumes that:
          - Each node in the path is either a tuple (x, y) or an object with attributes x and y.
          - The x value is the eastward displacement (in meters) from the origin.
          - The y value is the northward displacement (in meters) from the origin.
        
        Args:
            path (list): A list of nodes (<x, y>) representing the RRT path.
        
        Returns:
            list: A list of tuples where each tuple is (latitude, longitude).
        """
        gps_path = []
        for node in path:
            # Support both tuples and objects with x and y properties.
            if hasattr(node, 'x') and hasattr(node, 'y'):
                x = node.x
                y = node.y
            else:
                x, y = node

            # Compute latitude: move northward (y) from the origin's latitude.
            lat = self.origin_lat + self._lat_offset_in_degrees(y)
            # Compute longitude: move eastward (x) from the origin's longitude.
            lon = self.origin_lon + self._lon_offset_in_degrees(x, self.origin_lat)
            gps_path.append((lat, lon))
        return gps_path

